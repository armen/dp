Algorithm: Repeatable Paxos (Proposer)

Implements:
    RegularConsensus, instance c.

Uses:
    BestEffortBroadcast, instnace beb.
    PerfectPointToPointLinks, instance pp2p.

upon event < c, Init > do
    decided := false
    promises := ∅
    ts := 0                            > Logical clock for Paxos rounds
    numOfAccepts := 0
    pv := av := ⊥                      > Propose and Accept Values
    promBallot := accBallot := (0, 0)

func PROPOSE
    if ¬decided then
        ts := ts + 1
        numOfAccepts := 0
        promises := ∅
        trigger < beb, Broadcast | [PREPARE, (ts, RANK(self))] >

upon event < c, Propose | v > do
    pv := v
    PROPOSE()

upon event < pp2p, Deliver | p, [PROMISE, b, a, v] > do
    if (ts, RANK(self)) = b then
        promises := promises ∪ (a, v)
        if #promises = (N+1)/2 then
            (maxBallot, value) := HIGHEST_BY_BALLOT(promises)
            pv := value if value != ⊥ else pv
            trigger < beb, Broadcast | [ACCEPT, (ts, RANK(self)), pv] >

upon event < pp2p, Deliver | p, [ACCEPTED, ballot] > do
    if (ts, RANK(self)) = ballot then
        numOfAccepts := numOfAccepts + 1
        if numOfAccepts = (N+1)/2 then
            trigger < beb, Broadcast | [DECIDED, pv] >

upon event < pp2p, Deliver | p, [NACK, ballot] > do
    if (ts, RANK(self)) = ballot then
        PROPOSE()
